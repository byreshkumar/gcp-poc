name: CD Pipeline to Google Cloud Run (staging and production)
on:
  push:
    branches:
      - staging
  workflow_dispatch: {}
  release:
    types: published

env:
  PORT: 5001
  IMAGE: ${{vars.IMAGE}}:${{github.sha}}
  APP: app
jobs:
  test:
    runs-on: ubuntu-latest
    name: Setup, test, and build project
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install dependencies
        run: npm ci

      - name: Test application
        run: npm test
  build:
    needs: test
    runs-on: ubuntu-latest
    name: Setup project, Authorize GitHub Actions to GCP and Docker Hub, and deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate for GCP
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate for Docker Hub
        id: docker-auth
        env:
          D_USER: ${{secrets.DOCKER_USER}}
          D_PASS: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $D_USER -p $D_PASS

      - name: Build and tag Image
        run: |
          docker build -t ${{env.IMAGE}} .

      # - name: Push the image to Docker hub
        # run: |
          # docker push ${{env.IMAGE}}
       
      - name: Authenticate to GCR for docker
        run: |
          gcloud auth configure-docker ${{vars.GCR_REGION}}-docker.pkg.dev
          
      - name: Build and tag Image with GCR Repo details
        run: |
          #docker build -t ${{env.IMAGE}} .
          docker tag ${{env.IMAGE}} ${{vars.GCR_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/${{vars.GCR_REPO}}/testapp:${{github.sha}}
          
      - name: Push the image to GCR
        run: |
          docker push ${{vars.GCR_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/${{vars.GCR_REPO}}/testapp:${{github.sha}}
          
      - name: Pull the image from GCR
        run: |
          docker pull ${{vars.GCR_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/${{vars.GCR_REPO}}/testapp:${{github.sha}}
      
      - name: create a gke cluster
        run: |
          gcloud container clusters create hello-cluster --region ${{vars.GCR_REGION}}
      
      - name: connect to gke cluster
        run: |
          gcloud container clusters get-credentials hello-cluster --region ${{vars.GCR_REGION}}
      
      - name: create k8s deployment
        run: |
          kubectl create deployment hello-app --image=${{vars.GCR_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/${{vars.GCR_REPO}}/testapp:${{github.sha}}
      
      - name: Pull the image from GCR
        run: |
          docker pull ${{vars.GCR_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/${{vars.GCR_REPO}}/testapp:${{github.sha}}
      
      # - name: 'Create Cloud Deploy delivery pipeline'
        # run: |-
          # gcloud deploy apply --file config/clouddeploy.yaml --region ${{ vars.GCR_REGION }} --project=${{secrets.GCP_PROJECT_ID}}
          
      # - name: 'Create release name'
        # run: |-
          # echo "RELEASE_NAME=${{ env.APP }}-${GITHUB_SHA::7}-${GITHUB_RUN_NUMBER}" >> ${GITHUB_ENV}
          
      # - name: Create release to Cloud Deploy
        # uses: gcp-clouddeploy-ecosystem/release-clouddeploy@main
        # with:
          # release: release-01
          # delivery-pipeline: my-gke-demo-app-1
      
      # - name: 'Create Cloud Deploy release'
        # id: 'release'
        # uses: 'google-github-actions/create-cloud-deploy-release@v0'
        # with:
          # delivery_pipeline: 'my-gke-demo-app-1'
          # name: 'release-gke'
          # region: '${{ vars.GCR_REGION }}'
          # description: 'deploy on gke'
          # skaffold_file: 'config/skaffold.yaml'
          # images: 'app=${{vars.GCR_REGION}}-docker.pkg.dev/${{secrets.GCP_PROJECT_ID}}/${{vars.GCR_REPO}}/testapp:${{github.sha}}'

      # - name: 'Report Cloud Deploy release'
        # run: |-
          # echo "Created release ${{ steps.release.outputs.name }} "
          # echo "Release link ${{ steps.release.outputs.link }} "
          
      # - name: Enable the Billing API
        # run: |
          # gcloud services enable cloudbilling.googleapis.com --project=${{secrets.GCP_PROJECT_ID}}

      # - name: Deploy to GCP Run - Production environment (If a new release was published from the master branch)
        # if: github.event_name == 'release' && github.event.action == 'published' && github.event.release.target_commitish == 'main'
        # run: |
          # gcloud run deploy ${{vars.GCR_PROJECT_NAME}} \
          # --region ${{vars.GCR_REGION}} \
          # --image ${{env.IMAGE}} \
          # --platform "managed" \
          # --allow-unauthenticated \
          # --tag production

      # - name: Deploy to GCP Run - Staging environment
        # if: github.ref != 'refs/heads/main'
        # run: |
          # echo "Deploying to staging environment"

          # # Deploy service with to staging environment
          # gcloud run deploy ${{vars.GCR_STAGING_PROJECT_NAME}} \
          # --region ${{vars.GCR_REGION}} \
          # --image ${{env.IMAGE}} \
          # --platform "managed" \
          # --allow-unauthenticated \
          # --tag staging
